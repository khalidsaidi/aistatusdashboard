name: 🤖 AI Provider Discovery

on:
  schedule:
    # Run daily at 9:00 AM UTC (adjust to your preference)
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      email_override:
        description: 'Override notification email (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run mode (no notifications sent)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  discover-ai-providers:
    name: 🔍 Discover New AI Providers
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write
      actions: read

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --only=production
          # Install additional dependencies for discovery script
          npm install --no-save axios cheerio dotenv nodemailer

      - name: 🔍 Run AI Provider Discovery
        env:
          # GitHub and workflow configuration
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: ${{ inputs.dry_run }}

          # Email configuration - CRITICAL FOR PRODUCTION
          ENABLE_REAL_EMAIL_SENDING: 'true'
          DISCOVERY_EMAIL_RECIPIENT: ${{ inputs.email_override || secrets.DISCOVERY_EMAIL_RECIPIENT || 'admin@aistatusdashboard.com' }}

          # SMTP Configuration - Required for email sending
          SMTP_HOST: ${{ secrets.SMTP_HOST || 'smtp.gmail.com' }}
          SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE || 'false' }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          DEFAULT_FROM: ${{ secrets.DEFAULT_FROM || secrets.SMTP_USER }}
          DEFAULT_REPLY_TO: ${{ secrets.DEFAULT_REPLY_TO || secrets.SMTP_USER }}

          # Optional webhook notifications
          DISCOVERY_NOTIFICATION_WEBHOOK: ${{ secrets.DISCOVERY_NOTIFICATION_WEBHOOK }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

          # Site configuration
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://aistatusdashboard.com' }}
        run: |
          echo "🚀 Starting AI Provider Discovery..."
          echo "📅 Scheduled run at $(date)"
          echo "🔧 Configuration:"
          echo "  - Email: $DISCOVERY_EMAIL_RECIPIENT"
          echo "  - Dry run: $DRY_RUN"
          echo "  - SMTP Host: $SMTP_HOST"
          echo "  - SMTP User: $(echo $SMTP_USER | sed 's/./*/g')"
          echo "  - Email Sending: $ENABLE_REAL_EMAIL_SENDING"
          echo ""

          # Validate required environment variables
          if [ "$ENABLE_REAL_EMAIL_SENDING" = "true" ]; then
            if [ -z "$SMTP_USER" ] || [ -z "$SMTP_PASSWORD" ]; then
              echo "❌ SMTP credentials not configured!"
              echo "Please set SMTP_USER and SMTP_PASSWORD secrets in GitHub repository settings."
              exit 1
            fi
            echo "✅ SMTP credentials configured"
          fi

          # Create logs directory if it doesn't exist
          mkdir -p logs

          # Run discovery script with proper environment
          node scripts/discover-ai-providers.js

      - name: 📊 Upload Discovery Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: discovery-results-${{ github.run_number }}
          path: |
            logs/discovery-results.json
          retention-days: 30

      - name: 📈 Generate Summary Report
        if: always()
        run: |
          echo "## 🤖 AI Provider Discovery Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "logs/discovery-results.json" ]; then
            echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract summary from results file
            LATEST_RESULT=$(tail -n 50 logs/discovery-results.json | grep -o '"summary":[^}]*}' | tail -1)
            if [ ! -z "$LATEST_RESULT" ]; then
              echo "- **Sources Checked:** $(echo $LATEST_RESULT | grep -o '"sourcesChecked":[0-9]*' | cut -d':' -f2)" >> $GITHUB_STEP_SUMMARY
              echo "- **New Providers Found:** $(echo $LATEST_RESULT | grep -o '"totalDiscovered":[0-9]*' | cut -d':' -f2)" >> $GITHUB_STEP_SUMMARY
              echo "- **High Confidence:** $(echo $LATEST_RESULT | grep -o '"highConfidence":[0-9]*' | cut -d':' -f2)" >> $GITHUB_STEP_SUMMARY
              echo "- **Errors:** $(echo $LATEST_RESULT | grep -o '"errorsCount":[0-9]*' | cut -d':' -f2)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ No results file generated" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Workflow Runs](https://github.com/${{ github.repository }}/actions/workflows/ai-provider-discovery.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [Discovery Issues](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3Aai-discovery)" >> $GITHUB_STEP_SUMMARY
          echo "- [Dashboard Status](https://ai-status-dashboard-dev.web.app)" >> $GITHUB_STEP_SUMMARY

  # Optional: Send Slack notification on failure
  notify-failure:
    name: 📢 Notify on Failure
    runs-on: ubuntu-latest
    needs: [discover-ai-providers]
    if: failure()

    steps:
      - name: 📢 Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 AI Provider Discovery Failed

            **Repository:** ${{ github.repository }}
            **Workflow:** ${{ github.workflow }}
            **Run:** ${{ github.run_number }}
            **Time:** $(date)

            Please check the workflow logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
